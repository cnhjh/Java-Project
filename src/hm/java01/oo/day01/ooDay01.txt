回顾:
1.方法:函数、过程
    封装一段特定的业务逻辑功能
	尽可能独立，只干一件事。
	反复调用多次
	减少代码重复，有利于代码的维护，有利于团队协作
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用：
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
              方法名(有参传参);------------不建议
4.return的用法:
  1)return 值; //1.1)结束方法 1.2)返回结果给调用方
  2)return;    //2.1)结束方法



笔记:
1.什么是类？什么是对象？
  1)现实世界是由很多很多的对象组成的
    基于对象抽出了类
  2)对象:真实存在的单个的个体
    类:类型/类别，代表一类个体
  3)类中可以包含:
    3.1)所有对象所共有的属性/特征---------成员变量
	3.2)所有对象所共有的行为--------------方法
  4)一个类可以创建多个对象
    同一类型的多个对象，结构相同，数据不同
  5)类是对象的模板，对象是类的具体的实例
2.如何创建类？如何创建对象？如何访问成员？
3.引用类型之间画等号:
  1)指向同一个对象
  2)对其中一个引用的修改会影响另一个引用
    eg:房子钥匙
  基本类型之间画等号:
  1)赋值
  2)对其中一个变量的修改不会影响另一个变量
    eg:身份证复印件
4.null:空，没有指向任何对象
       若引用的值为null，则该引用不能再进行任何操作了
	   若操作则NullPointerException空指针异常



练习:
1.完成打印员工信息案例
2.完成Cell和CellTest类:(至少有一次oo.day02包中)--每人两次
  1)Cell类，包括:
    1.1)属性:row,col
	1.2)方法:void drop(){}
	         void moveLeft(int n){}
			 String getCellInfo(){}
  2)CellTest类，包括:
    2.1)main方法:创建格子对象，调用printWall()测试
	2.2)printWall(Cell cc)方法:打墙+打格

















引用类型的默认值就是null













房子:对象
房子钥匙:引用
配一把钥匙:引用


















步骤:
1)抽printWall()方法，将双层for复制到方法中
2)给printWall()设计参数Cell cc
3)调用printWall()，传递小c














1)找对象:很多很多的小格子对象
2)抽类:格子类Cell
3)设计类中的成员变量和方法:
4)创建对象并测试:







new Cell();
new Cell();
new Cell();

new Student();
new Student();
new Student();






数据类型  引用  指向     对象
Cell       c     =      new Cell();
















             引用
数据类型  引用类型变量  指向    对象
Student      zs           =     new Student();

    基本类型变量(变量)
int a;




class Cell{ //格子类
  int row; //行号
  int col; //列号

  void drop(){ //下落1格
    row++;
  }
  void moveLeft(int n){ //左移n格
    col-=n;
  }
  String getCellInfo(){ //获取行号和列号
    return row+","+col;
  }
}









 /


byte,short,int,long,char------------0
float,double------------------------0.0
boolean-----------------------------false
引用类型----------------------------null












oo.day01
Student
StudentTest











Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";
zs.stuId = "001";
zs.eat();
zs.sleep();
zs.study();
zs.abc = 250; //编译错误，无法访问abc


Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";
ls.stuId = "002";
ls.eat();
ls.sleep();
ls.study();




class Student{
  String name;
  int age;
  String address;
  String stuId;
  void eat(){}
  void sleep(){}
  void study(){}
}




Student zs = new Student(); //创建了一个Student类的对象
Student ls = new Student();
Student ww = new Student();











class Teacher{
  String name;
  int age;
  String address;
  double salary;
  void eat(){}
  void sleep(){}
  void teach(){}
}



class Dog{
  String color;
  String type;
  void 叫(){}
  ...
}

class Car{
  String type;
  String color;
  double price;
  void run(){}
  void back(){}
  void stop(){}
}









对象                     类
WKJ                     老师
GJ
NYH

张三                    学生
李四
王五

小黑                    狗
小花
小强

奥迪                    汽车
奥拓
马六















面向过程的结构化设计弊端:
1)缺乏对数据的封装
2)数据与方法(操作数据)的分离









class Emp{ //Emp就是我自己造的一个数据类型
  String name;
  int age;
  double salary;
  void print(){
    System.out.println("姓名:"+name);
	System.out.println("年龄:"+age);
	System.out.println("工资:"+salary);
  }
}

class Test{
  public static void main(String[] args){
	Emp e = new Emp(); //创建了一个Emp的对象
    e.name = "zhangsan";
	e.age = 25;
	e.salary = 5000;
    e.print();
  }
  
}











基本类型--------------------只能装一个
数组类型--------------------必须类型相同
自己造个数据类型------------想装什么就装什么













这几天都是晕乎乎的过来的--------------正常的


不晕:
1)什么也不懂
2)自以为不晕---------------很不错很不错很不错

















高质量的代码:
   复用性好、维护性好、扩展性好、
   可移植性好、健壮好、可读性好、效率好......
















清华思路-------------环保系统





做一套架构------------抽4个人


福州夜间施工项目---------------我一个人


30万
最多5个小时










OA办公系统---------------------某和
-----------主要卖给国家机构

OA------------.net做的
--------------Java做的






产品:可以适应很多公司
项目:只适应一家公司













语言基础:固定
1)画一个圆形
2)去银行取钱
3)猜字符小游戏

面向对象:抽象
1)画一个图形
2)向着社会主义社会发展
3)射击游戏














面向对象(OO)
OOA:面向对象分析
OOD:面向对象设计
OOAD:面向对象分析与设计

OOP:面向对象编程-----------------参与















public static int[] generateArray(int len,int max){
  int[] arr = new int[len];
  for(int i=0;i<arr.length;i++){
    arr[i] = (int)(Math.random()*(max+1));
  }
  return arr;
}


请输入游戏等级(5、7、9):8
请输入游戏等级(5、7、9):6
请输入游戏等级(5、7、9):4
请输入游戏等级(5、7、9):2
请输入游戏等级(5、7、9):7
ABCDEFG











