回顾:
1.static final常量:
    必须声明同时初始化，不能改变，通过类名点来访问，大写
	编译器在编译时会将常量直接替换为具体的值
2.抽象方法:
    abstract，只有方法的定义，没有具体的实现
3.抽象类:
    abstract，包含抽象方法的类，必须是抽象类
    不能被实例化，是需要被继承的，子类:
	  1)重写抽象类中的所有抽象方法
	  2)也声明为抽象类
	意义:代码复用、统一造型、
	     包含抽象方法，为所有子类提供统一的入口
		   子类的实现不同，但入口是一致的
4.接口:
    标准、规范、interface，只能包含抽象方法和常量
	不能被实例化，是需要被实现的，实现类:必须重写所有抽象方法
	一个类可以实现多个接口，用逗号分隔，应先继承后实现
	接口可以继承接口



正课:
1.多态:
  1)意义:
    1.1)同一类型的引用，在指向不同的对象时，有不同的实现
	    ------行为的多态:cut(),run(),teach(),area()
	1.2)同一个对象，被造型为不同的类型时，有不同的功能
	    ------对象的多态:我、水
  2)向上造型:
    2.1)父类型的引用指向子类的对象
	2.2)能造型成为的类型有: 父类、所实现的接口
	2.3)能点出来什么，看引用的类型
  3)强制类型转换，成功的条件有两种:
    3.1)引用所指向的对象，就是该类型
	3.2)引用所指向的对象，实现了该接口
  4)强转时若不符合如上两个条件，则发生ClassCastException类型转换异常
    建议:强转之前先通过instanceof来判断引用所指向的对象是否是该类型
2.成员内部类: 应用率不高
  1)类中套类，外面的称为外部类Outer，里面的称为内部类Inner
  2)内部类通常只服务于外部类，对外不具备可见性
  3)内部类对象通常是在外部类中创建的
  4)内部类中可以直接访问外部类的成员(包括私有的)
    内部类中有一个隐式的引用指向了创建它的外部类对象
	  eg: 外部类名.this
3.匿名内部类:
  1)若想创建一个类(子类)的对象，并且对象只被创建一次，
    此时该类可以不必命名，称为匿名内部类
  2)匿名内部类中若想访问外部的变量，该变量必须是final的






面向对象三大特征:
1.封装:
  1)类:封装的是对象的属性和行为
  2)方法:封装的是具体的业务逻辑功能实现
  3)访问控制修饰符:封装的是访问的权限
2.继承:
  1)代码的复用
  2)父类/基类:所有子类所共有的属性和行为
    子类/派生类:子类所特有的属性和行为
  3)子类继承父类之后，子类具有:父类的+子类的
  4)传递性、单一继承、多接口实现
3.多态:
  1)意义:行为的多态、对象的多态
  2)向上造型、强制类型转换、instanceof判断
  3)多态的表现形式: 
    3.1)重写(依据对象的不同来实现多态)
    3.2)重载(依据参数的不同来实现多态)


面向对象课程安排:
第一天:
  1)什么是类？什么是对象？
  2)如何创建类？如何创建对象？如何访问类中成员？
  3)引用类型画等号
  4)null和NullPointerException
第二天:
  1)方法的重载:
  2)构造方法:
  3)this:
  4)引用类型数组:
第三天:
  1)内存管理:
  2)继承:
  3)super:
  4)向上造型:
第四天:
  1)方法的重写、重写与重载的区别
  2)package和import
  3)访问控制修饰符:
  4)static:
  5)final:
  6)static final常量:
第五天:
  1)抽象方法:
  2)抽象类:
  3)接口:
第六天:
  1)多态:意义、向上造型、强转、instanceof
  2)内部类:成员内部类、匿名内部类



练习:
1)设计射击游戏的那8个类
2)完成农行ATM机的完整代码
3)看射击游戏那8个类的结构-----------建议(选做)



设计规则:
1)将所有子类所共有的属性和行为，抽象到父类中
2)所有子类行为都一样，设计为普通方法
  所有子类行为都不一样，设计为抽象方法
3)将部分子类所共有的行为，抽象到接口中
  符合既是也是原则时，使用接口
  接口是对继承的单根性的扩展-----实现多继承












打掉小敌机--------------得5分
打掉BOSS机--------------得20分

打掉小蜜蜂--------------得奖励
打掉大黄蜂--------------得奖励、得分




class FlyingObject{ //飞行物
  image,width,height,x,y
}
interface Enemy{ //敌人
  int getScore();
}
interface Award{ //奖励
  int getType();
}
class Hero extends FlyingObject{ //英雄机
}
class Airplane extends FlyingObject implements Enemy{ //小敌机
}
class Bee extends FlyingObject implements Award{ //小蜜蜂
}
class Bullet extends FlyingObject{ //子弹
}
class ShootGame{ //主程序类
  main(){
    
  }
}
















打掉蜜蜂，得奖励(得命，得火力)

英雄机默认火力值为0(单倍火力)
          命为3

火力值大于0时(双倍火力)
得一次---------------------火力值得40
发一次双倍火力-------------火力值减2
英雄机死一次---------------火力值归零





























问:内部类有独立的.class吗?
答:有












Mama$Baby.class
NstInnerClassDemo$1.class
NstInnerClassDemo$2.class
NstInnerClassDemo$3.class











1.2-1.3-...-1.6-1.7(功能的升级)
1.7到1.8(功能的升级+内存管理的修改)















NstInnerClassDemo














InnerClassDemo










Aoo o1 = new Aoo();
Boo o2 = new Boo();





class Aoo{ //外部类
  private int a;
  void test(){
    Boo o = new Boo();
  }
  class Boo{ //内部类
    void test(){
	  System.out.println(a);
	  System.out.println(Aoo.this.a);
	  System.out.println(this.a); //编译错误，本类中没有a
	}
  }
}



























农行ATM机系统:
1)所有卡都能插
2)只有农行卡才能支付电话费










ABCATM atm = new ABCATM();
UnionPay card = new ICBCImpl(); //银联卡--工行卡
atm.insertCard(card); //插卡


class ABCATM{ //农行ATM机类
  private UnionPay card; //银联卡
  public void insertCard(UnionPay card){ //插卡
    this.card = card;
  }

  public void 支付电话费(){
    
  }

}






















Aoo o1 = new Boo(); //向上造型
Boo o2 = (Boo)o1; //符合条件一
Inter1 o3 = (Inter1)o1; //符合条件二
Coo o4 = (Coo)o1; //ClassCastException类型转换异常
if(o1 instanceof Coo){ //false
  Coo o5 = (Coo)o1;
}

System.out.println(o1 instanceof Boo);    //true
System.out.println(o1 instanceof Inter1); //true
System.out.println(o1 instanceof Coo);    //false


interface Inter1{
}
class Aoo{
}
class Boo extends Aoo implements Inter1{
}
class Coo extends Aoo{
}

















我 me = new 我();
讲师       o1 = me;
孩子他妈   o2 = me;
老公的老婆 o3 = me;

o1.授课();
o2.揍他();
o3.咬他();
o3.收工资();

me.授课();
me.揍他();
me.咬他();
me.收工资();

interface 讲师{
  void 授课();
}
interface 孩子他妈{
  void 揍他();
}
interface 老公的老婆{
  void 咬他();
  void 收工资();
}
class 我 implements 讲师，孩子他妈，老公的老婆{
  public void 授课(){}
  public void 揍他(){}
  public void 咬他(){}
  public void 收工资(){}
}
















动物 o1 = new 老虎();
动物 o2 = new 鸟();
动物 o3 = new 鱼();

o1.run(); //地
o2.run(); //天
o3.run(); //水

abstract class 动物{
  abstract void run(){}
}
class 老虎 extends 动物{
  void run(){在地上跑}
}
class 鸟 extends 动物{
  void run(){在天上飞}
}
class 鱼 extends 动物{
  void run(){在水里游}
}













人 p1 = new 理发师();
人 p2 = new 外科医生();
人 p3 = new 演员();

p1.cut(); //剪发
p2.cut(); //开刀
p3.cut(); //停止表演


abstract class 人{
  abstract void cut();
}
class 理发师 extends 人{
  void cut(){ 剪发 }
}
class 外科医生 extends 人{
  void cut(){ 开刀 }
}
class 演员 extends 人{
  void cut(){ 停止表演 }
}

































达内教学副总裁:
  解决问题()、培训员工()、编辑稿件()
达内讲师:
  解决问题()、培训员工()、编辑稿件()
达内项目经理:
  编辑稿件()


abstract class 达内职员{
  姓名、年龄、工资
  void 上班打卡(){ 按个手纹、拍个照 }
  void 下班打卡(){ 按个手纹、拍个照 }
  abstract void 完成工作();
}
interface 企业技术顾问{
  void 解决问题();
  void 培训员工();
}
interface 技术图书作者{
  void 编辑稿件();
}
class 达内教学副总裁 extends 达内职员 implements 企业技术顾问，技术图书作者{
}
class 达内讲师 extends 达内职员 implements 企业技术顾问，技术图书作者{
}
class 达内项目经理 extends 达内职员 implements 技术图书作者{
}
class 达内班主任 extends 达内职员{
}













构造方法:构造器、构建器、构造函数














interface CCB extends UnionPay{
  public boolean payFire(double money);
}
class CCBImpl implements CCB{
  重写4个抽象方法
}






class Six extends Shape{
  public Six(double c){
    this.c = c;
  }
  public double area(){
    return 0.0721*c*c;
  }
}


























Circle[] cs = new Circle[3];
Square[] ss = new Square[3];
Six[] sixes = new Six[3];

Shape[] shapes = new Shape[9];


















打墙+打T型


public static void printWall(Tetromino t){
}
















