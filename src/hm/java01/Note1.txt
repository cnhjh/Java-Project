//--------------------第一个星期 ------------------------

// ##################### day01: ######################
笔记:
1.Linux操作系统
  1)开源的操作系统、免费，主要作为服务器操作系统，
    而Java主要是服务器端开发，所以部署环境都是Linux
  2)Linux与Windows目录结构的区别:
    2.1)文件系统不同:
	      Linux:目录     Windows:盘符
	2.2)外部设备映射不同:
	      Linux:挂载点   Windows:盘符
	2.3)安全级别不同:
	      Linux:高       Windows:低       
  3)Linux常用命令:
    3.1)pwd:显示当前工作目录
	3.2)ls:查看当前工作目录的内容
	3.3)cd:改变当前工作目录
	       相对路径:相对于当前目录的位置
		            .:当前目录
					..:上一级目录
		   绝对路径:相对于根目录的位置
		            以/开头
2.Java开发环境:
  1)编译运行过程:---------常见面试题
    1.1)编译期:.java源文件，经过编译，生成.class字节码文件
	1.2)运行期:JVM加载.class并运行.class
	跨平台、一次编程到处使用
  2)名词解释:
    2.1)JVM:java虚拟机
	        加载.class并运行.class
	2.2)JRE:java运行环境
	        除了包含JVM以外还包含运行java程序所必须的环境
            JRE=JVM+java系统类库
	2.3)JDK:java开发工具包
	        除了包含JRE以外还包含开发java程序所必须的命令工具
			JDK=JRE+编译、运行等命令工具
	    运行java程序的最小环境JRE
		开发java程序的最小环境JDK
  3)配置环境变量:------------------了解
    3.1)JAVA_HOME:指向jdk的安装路径
	3.2)CLASSPATH:表示类的搜索路径，一般简写为.
	3.3)PATH:指向jdk下的bin目录
3.eclipse:
   IBM、开源的、免费的、只需解压即可


步骤:
1)新建一个Java项目/工程-----------小区
2)新建一个Java包------------------楼号+单元号
3)新建一个Java类------------------房子

注释:解释性文本
1)单行注释://
2)多行注释:/* */
3)文档注释:/** */


// ##################### day02: ######################
笔记:
1.变量:存数的，代词，指代的就是它所存的那个数
  1)声明:
      int a; //声明一个整型的变量，名为a
	  int b,c,d; //声明三个整型的变量，名为b,c,d
  2)命名:
    2.1)只能包含字母、数字、_和$符，并且不能以数字开头
	2.2)严格区分大小写
	2.3)不能使用关键字
	2.4)可以中文命名，但不建议
	    建议"英文的见名知意"，"驼峰命名法"
  3)初始化:第一次赋值
    3.1)声明的同时初始化:
	      int a = 5; //声明整型变量a并赋值为5
	3.2)先声明后初始化:
	      int a; //声明整型变量a
		  a = 5; //给变量a赋值为5
  4)使用:
    4.1)对变量的使用就是对它所存的那个数的使用
	      int a = 5; //声明整型变量a并赋值为5
		  int b = a+10; //取出a的值5，加10后，再赋值给b
		  System.out.println(b);   //输出变量b的值15
		  System.out.println("b"); //b，双引号中的原样输出
		  a = a+10; //取出a的值5，加10后，再赋值给a
		            //在a本身基础之上增10
	4.2)变量的使用必须与数据类型匹配
	      int a = 3.14; //编译错误，数据类型不匹配
	4.3)变量在用之前必须声明并初始化
	      System.out.println(m); //编译错误，m未声明
		  int m;
		  System.out.println(m); //编译错误，m未初始化
2.基本数据类型:
  1)int:整型，4个字节，-21个多亿到21个多亿
    1.1)整数直接量默认为int型，但不能超出范围，超范围则编译错误
	1.2)两个整数相除，结果还是整数，小数位无条件舍弃
	1.3)整数运算时超出范围，则发生溢出，溢出是需要避免的
  2)long:长整型，8个字节，很大很大很大
    2.1)长整型直接量需在数字后加L或l
	2.2)运算时或有可能发生溢出，建议在第1个数字后加L
	2.3)System.currentTimeMillis()用于获取自
	    1970.1.1零时到此时此刻的毫秒数
  3)double:浮点型，8个字节，很大很大很大
    3.1)浮点数直接量默认为double型，表示float需在数字后加F或f
	3.2)double型数据参与运算时，有可能会出现舍入误差
  4)boolean:布尔型，1个字节
    4.1)只能取值为true和false
  5)char:字符型，2个字节
    5.1)采用Unicode编码格式，一个字符对应一个码(0到65535)
	    表现形式的是char字符，但实质上存储的是int码
		ASCII码('a'--97  'A'--65  '0'--48)
	5.2)字符必须放在单引号中，有且仅有一个
	5.3)特殊字符需通过\来转义
3.基本数据类型的转换:
    类型从小到大依次为:
	   byte-short-int-long-float-double
	         char-
  1)两种方式:
    1.1)自动类型转换:小类型到大类型
	1.2)强制类型转换:大类型到小类型
	      语法:(要转换成为的数据类型)变量
               强转有可能会发生溢出或精度的丢失
  2)两点规则:
    2.1)整数直接量可以直接赋值给byte,short,char,
	    但不能超范围
	2.2)byte,short,char型数据参与运算时，
	    先一律转换为int再运算
4.Scanner的用法:
  1)在package下:
      import java.util.Scanner;
  2)在main()方法中:
      Scanner scan = new Scanner(System.in);
  3)在第2步之下:
      System.out.println("请输入年龄:");
      int age = scan.nextInt();
      System.out.println("请输入价格:");
	  double price = scan.nextDouble();

// ##################### day03: ######################
笔记:
1.运算符:
  1)算术运算符:+-*/%,++,--
  2)关系运算符:>,<,>=,<=,==,!= boolean
  3)逻辑运算符:&&,||,! boolean
  4)赋值运算符:=,+=,-=,*=,/=,%=
  5)字符串连接运算符:+
  6)三目/条件运算符:boolean?数1:数2
2.分支结构:
  1)if结构:1条路
  2)if...else结构:2条路
  3)if...else if结构:多条路
  4)switch...case结构:多条路
    优点:效率高、结构清晰
	缺点:整数、相等
	break:跳出switch


// ##################### day04: ######################
笔记:
1.循环:反复执行一段相同或相似的代码
2.循环的三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在整个循环过程中所反复改变的那个数
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选do...while
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环


// ##################### day05: ######################
笔记:
1.三种循环结构的更佳适用情况:
  1)while:"当..."
  2)do...while:"直到..."
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用，外层控制行，内存控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套的层数越少越好，能一层就不用两层，能两层就不用三层
         若业务必须要通过三层以上的循环才能解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
	设计良好的/合理的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
	  int[] arr = {1,4,7,9}; //1,4,7,9
	  int[] arr = new int[]{1,4,7,9}; //1,4,7,9
      int[] arr;
	  arr = {1,4,7,9}; //编译错误，此方式只能声明同时初始化
	  arr = new int[]{1,4,7,9}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)来获取数组的长度
	      int[] arr = new int[4];
          System.out.println(arr.length); //4
	5.2)通过下标/索引来访问数组中的元素
	    下标从0开始，最大到(数组名.length-1)
          int[] arr = new int[3];
		  arr[0] = 100; //给arr中第1个元素赋值为100
		  arr[1] = 200;
		  arr[2] = 300;
		  arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[arr.length-1]); //输出最后一个元素的值
  6)数组的遍历:
      int[] arr = new int[10];
	  for(int i=0;i<arr.length;i++){
	    arr[i] = 100;
	  }
	  for(int i=0;i<arr.length;i++){
	    System.out.println(arr[i]);
	  }
	  for(int i=arr.length-1;i>=0;i--){
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);
	7.2)int[] a1 = Arrays.copyOf(a,6);
	    a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Arrays.sort(arr); //升序
	8.2)冒泡排序算法:
	    8.2.1)四个数冒三轮
		8.2.2)每一轮都是从第1个元素开始冒
		      每一次都是和它的下一个元素比
		8.2.3)冒出来的就不带它玩了

// ##################### day06: ######################
正课:
1.方法:
  1)封装一段特定的业务逻辑功能
  2)方法尽可能的独立，一个方法只干一件事
  3)方法可以被反复调用多次
  4)减少代码的重复，有利于代码的维护，有利于团队的协作
2.方法的定义:
    修饰词 返回值类型 方法名(参数列表){
	  方法体
	}
3.方法的调用:
  1)无返回值: 方法名(有参传参);
  2)有返回值: 数据类型 变量 = 方法名(有参传参);
4.return的用法:
  1)return 值; //1.1)结束方法的执行 1.2)返回结果给调用方
  2)return;    //2.1)结束方法的执行(只能用在无返回值的方法中)

猜字符小游戏:












































