回顾:
1.运算符:
  1)算术:+-*/%,++,--
  2)关系:>,<,>=,<=,==,!= boolean
  3)逻辑:&&,||,! boolean
  4)赋值:=,+=,-=,*=,/=,%=
  5)字符串连接:+
  6)三目/条件:boolean?数1:数2
2.分支结构:
  1)if:1条路
  2)if...else:2条路
  3)if...else if:多条路
  4)switch...case:多条路
    优点:效率高、结构清晰
	缺点:整数、相等
    break:跳出switch





笔记:
1.循环:反复执行一段相同或相似的代码
2.循环的三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在整个循环过程中所反复改变的那个数
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时，首选do...while
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环


练习:---------------至少再写一次
1)猜数字之while
2)猜数字之do...while
3)随机加法运算符之for


课后作业:
sum=1111111111100
sum=3.318....9937










Addition

Math.random()--------------0.0到0.9999999999...
*100-----------------------0.0到99.999999999...
(int)----------------------0到99




int score = 0; //分
for(int i=1;i<=10;i++){ //10次
  //1.出题  2.答题  3.判题
}
System.out.println("总分为:"+score);



(1)25+15=?
算吧!
40
答对了

(2)89+45=?
算吧!
120
答错了

(3)89+45=?
算吧!
120
答错了

(4)89+45=?
算吧!
120
答错了

(5)89+45=?
算吧!
120
答错了

(6)89+45=?
算吧!
120
答错了

(7)89+45=?
算吧!
120
答错了

(8)89+45=?
算吧!
120
答错了

(9)89+45=?
算吧!
120
答错了

(10)89+45=?
算吧!
120
答错了
总得分为:10















for(要素1 ; 要素2 ; 要素3){
  语句块
}





//     1             2           3
for(int times=0 ; times<10 ; times++){
  System.out.println("行动是成功的阶梯"); //4
}
System.out.println("over");

12432432432432432432
12432432432432432432

int times=0; //1
while(times<10){ //2
  System.out.println("行动是成功的阶梯"); //4
  times++; //3
}
System.out.println("over");














while(boolean){
  语句块
}










int guess;
do{
  1+3
  大小退出
}while(2);
对或退出判断
















1到1000




Math.random()-------------0.0到0.99999999999999...
*1000---------------------0.0到999.999999999999...
(int)---------------------0到999
+1------------------------1到1000


Math.random()-------------0.0到0.99999999999999...
*1000---------------------0.0到999.999999999999...
+1------------------------1.0到1000.99999999999...
(int)---------------------1到1000















int a = 5;
int a = scan.nextInt();
int a = ?; //随机数

















int num = 250; //藏起来的数

循环变量:用户猜的数guess
1)System.out.println("猜吧!");
  int guess = scan.nextInt();
2)guess!=num
3)System.out.println("猜吧!");
  guess = scan.nextInt();



Guessing









猜吧!
300
太大了

猜吧!
200
太小了

猜吧!
251
太大了

猜吧!
250
恭喜你，猜对了!




















案例一: 输出10次"行动是成功的阶梯"
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
   行动是成功的阶梯
 循环变量:次数times
 1)int times=0;
 2)times<10
 3)times++;
 times=0/1/2/3/4/5/6/7/8/9/10时结束


案例二: 输出9的乘法表:
   1*9=9
   2*9=18
   3*9=27
   4*9=36
   5*9=45
   6*9=54
   7*9=63
   8*9=72
   9*9=81
 循环变量:乘数num
 1)int num=1;
 2)num<=9
 3)num++;
 num=1/2/3/4/5/6/7/8/9/10时结束




WhileDemo，包含main，把注释删掉









循环变量:份数num
1)int num=0;
2)num<10
3)num++;
num=0/1/2/3/4/5/6/7/8/9/10时结束

                        份数为0
够10份吗? 不够 打印一份 份数为1
够10份吗? 不够 打印一份 份数为2
够10份吗? 不够 打印一份 份数为3
够10份吗? 不够 打印一份 份数为4
够10份吗? 不够 打印一份 份数为5
够10份吗? 不够 打印一份 份数为6
够10份吗? 不够 打印一份 份数为7
够10份吗? 不够 打印一份 份数为8
够10份吗? 不够 打印一份 份数为9
够10份吗? 不够 打印一份 份数为10
够10份吗? 够了

















循环变量:圈数count
1)int count=0;
2)count<3
3)count++;
count=0/1/2/3时结束

                      圈数为0
够3圈吗? 不够 跑一圈  圈数为1
够3圈吗? 不够 跑一圈  圈数为2
够3圈吗? 不够 跑一圈  圈数为3
够3圈吗? 够了






























任何复杂的程序逻辑都可以通过三种结构来实现:
1)顺序结构:从上往下逐行执行，每句必走
2)分支结构:有条件的执行某语句一次，并非每句必走
3)循环结构:有条件的执行某语句多次，并非每句必走


while(boolean){ //多次
  语句块/循环体-------------反复干的那个事
}
System.out.println("over");













if(boolean){ //一次
  语句块
}
System.out.println("over");













1/3/5/7/8/10/12-------------31天
4/6/9/11--------------------30天
2---------------------------28天/29天














int a=8,b=3,c=5,d=1; //a=3,b=5,c=8;
若a>b则交换，保证a<b
若a>c则交换，保证a<c
若a>d则交换，保证a<d
若b>c则交换，保证b<c
若b>d则交换，保证b<d
若c>d则交换，保证c<d















int a=8,b=55; //升序(a=5,b=8)
if(a>b){
  int t=a; //t=8
  a=b;     //a=5
  b=t;     //b=8
}
若a>b则交换，保证a<b










int t=a;a=b;b=t;
int t=b;b=a;a=t;














System.out.println("请输入两个数:");
int a = scan.nextInt();
int b = scan.nextInt();

5      8
5 8
5
8








